http://tomcat.apache.org

좌측 메뉴
 - Download 
 - Tomcat 8 클릭
 - 8.5.32
 - 64-bit Windows zip (pgp, sha1, sha512) 클릭      
 - apache-tomcat-8.5.32-windows-x64.zip 파일 다운로드

<zip압축풀기>
C:\apache-tomcat-8.5.32
   - bin  (서버관련 명령어)
   - conf (설정파일)
   - lib  (Servlet/JSP서비스를 위한 jar파일들)
   - webapps (새로작성한 웹어플리케이션 서비스파일들을 위치시킴
              HTML,CSS,JS,JSP,JAVA클래스)
   - work (읽기전용 폴더, 개발자가 작성한 JSP파일과 매핑되는
           서블릿파일들을 서버가 생성하여 위치시키는 곳)

      예) 개발자 작성 hello.jsp
        ---> work폴더에는 hello_jsp.java 와 hello_jsp.class파일 생성
        
====================================================================        

<서블릿>  javax.servlet.Servlet
- 자바플랫폼에서 컴포넌트를 기반으로 한 웹 애플리케이션을 개발할때 사용.
- 스레드를 기반으로 하므로 웹 애플리케이션 운영에 효율적.
- 자바를 기반으로 하므로 자바 API를 모두 사용할 수 있다.
- 운영체제나 하드웨어에 영향을 받지 않으므로 
   한번 개발된 애플리케이션은 다양한 서버환경에서도 실행이 가능.
- 웹애플리케이션에서 효율적인 자료 공유 방법을 제공.
- JSP는 서블릿을 기반으로 한 기술.




<웹애플리케이션 개발 시 서블릿을 사용하면 좋은 점>
- 콘텐츠와 비즈니스 로직을 분리 할 수 있다.
- 컨트롤러와 뷰의 역할 분담으로 인해 웹 디자이너와 개발자 간의 원활한
   작업이 가능.
- 유지보수가 수월.
- 기능확장이 용이.

<서블릿 클래스의 상속관계>
  javax.servlet.Servlet(인터페이스)
              |
              |
  javax.servlet.GenericServlet(클래스)
              |
              |
  javax.servlet.http.HttpServlet(클래스)
  
===========================================================
<서블릿의 생명주기 메소드> ★ Life Cycle
1. init()메소드
   - 서블릿 로딩
   - 서블릿 초기화 메소드

2. service()메소드
   - 웹브라우저 서비스 메소드
   - 클라이언트 요청에 따라 doGet()이나 doPost()메소드로 분기
   - 사용자 요청 처리는 request(요청객체,client)로
                  응답 처리는 response(응답객체,server)객체로 처리함.

3. destroy()메소드
   - 컨테이너로부터 서블릿 종료요청이 있을때
         서블릿 종료직전에 해야할 작업을 명시할 때 사용.
   - 대부분의 경우 컨테이너가 종료될 때 실행.           

============================================================
<서블릿 실행방법>
1. http://192.168.0.28:8282/TomTest/servlet/com.encore.t0702.MyServlet
   ---> 보안상 문제 발생
   
2. WEB-INF/web.xml에 작성된 서블릿 클래스를 등록.
   ---> 등록과 함께 서블릿에 대한 가상의 경로를 매핑시켜서 호출.
   
   
   
   
   
      










        